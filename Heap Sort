/*#include <iostream>
using namespace std;

void heapify(int arr[], int n, int i) {
    int largest = i;
    int left_child = 2 * i + 1;
    int right_child = 2 * i + 2;

    // Check if left child exists and is greater than the root
    if (left_child < n && arr[left_child] > arr[largest]) {
        largest = left_child;
    }

    // Check if right child exists and is greater than the largest so far
    if (right_child < n && arr[right_child] > arr[largest]) {
        largest = right_child;
    }

    // Change root if needed
    if (largest != i) {
        swap(arr[i], arr[largest]); // Swap
        // Recursively heapify the affected sub-tree
        heapify(arr, n, largest);
    }
}

void heapSort(int arr[], int n) {
    // Build a max heap
    for (int i = n / 2 - 1; i >= 0; i--) {
        heapify(arr, n, i);
    }

    // Extract elements one by one
    for (int i = n - 1; i > 0; i--) {
        //swap(arr[0], arr[i]); // Swap
        heapify(arr, i, 0);
    }
}

int main() {
    int arr[] = {12, 11, 13, 5, 6, 7};
    int n = sizeof(arr) / sizeof(arr[0]);

    // cout << "Original array: ";
    // for (int i = 0; i < n; i++) {
    //     cout << arr[i] << " ";
    // }
    // cout << endl;

    heapSort(arr, n);

    cout << "Sorted array: ";
    for (int i = 0; i < n; i++) {
        cout << arr[i] << " ";
    }
    cout << endl;

    return 0;
}*/

